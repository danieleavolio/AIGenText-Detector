
model:
  model_name: cnn_3conv_regularizers
  model_type: CNN
  model_goal: binary text classification
  train_epochs: 2
  model_structure: 
        _________________________________________________________________
        Layer (type)                Output Shape              Param #   
        =================================================================
        tokenized_dataset (InputLa  [(None, 512)]             0         
        yer)                                                            
                                                                        
        embeddings (Embedding)      (None, 512, 256)          2097152   
                                                                        
        reshape_1 (Reshape)         (None, 512, 256, 1)       0         
                                                                        
        convolution-1 (Conv2D)      (None, 510, 254, 128)     1280      
                                                                        
        dropout_2 (Dropout)         (None, 510, 254, 128)     0         
                                                                        
        convolution-2 (Conv2D)      (None, 508, 252, 64)      73792     
                                                                        
        maxpool1 (MaxPooling2D)     (None, 254, 126, 64)      0         
                                                                        
        convolution-3 (Conv2D)      (None, 252, 124, 32)      18464     
                                                                        
        maxpool2 (MaxPooling2D)     (None, 126, 62, 32)       0         
                                                                        
        maxpool3 (MaxPooling2D)     (None, 63, 31, 32)        0         
                                                                        
        flatten_1 (Flatten)         (None, 62496)             0         
                                                                        
        dense_4 (Dense)             (None, 128)               7999616   
                                                                        
        dropout_3 (Dropout)         (None, 128)               0         
                                                                        
        dense_5 (Dense)             (None, 64)                8256      
                                                                        
        dense_6 (Dense)             (None, 16)                1040      
                                                                        
        dense_7 (Dense)             (None, 1)                 17        
                                                                        
        =================================================================
  binary_accuracy: ~0.99
  competition_score: 0.852
  model_size: 
    Total params: 10199617 (38.91 MB)
    Trainable params: 10199617 (38.91 MB)
    Non-trainable params: 0 (0.00 Byte)
  model_code:
    input_ids = tf.keras.Input(shape=(MAX_LENGTH,), name='tokenized_dataset', dtype='int32')
    emb1 = keras.layers.Embedding(input_dim,256, input_length=MAX_LENGTH, name="embeddings")(input_ids)
    reshape = keras.layers.Reshape(( 512, 256,1))(emb1)
    conv1 = keras.layers.Conv2D(128, 3, activation='leaky_relu', name="convolution-1")(reshape)
    drp1 = keras.layers.Dropout(0.50)(conv1)
    conv2 = keras.layers.Conv2D(64, 3, activation='leaky_relu', name="convolution-2")(drp1)
    maxpool1 = keras.layers.MaxPooling2D(pool_size=(2, 2), padding="same", name="maxpool1") (conv2)
    conv3 = keras.layers.Conv2D(32, 3, activation='leaky_relu', name="convolution-3")(maxpool1)
    maxpool2 = keras.layers.MaxPooling2D(pool_size=(2, 2), padding="same", name="maxpool2") (conv3)
    maxpool3 = keras.layers.MaxPooling2D(pool_size=(2, 2), padding="same", name="maxpool3") (maxpool2)

    flat = keras.layers.Flatten()(maxpool3)
    dense1 = keras.layers.Dense(128,activation="leaky_relu", kernel_regularizer='l1_l2')(flat)
    drp1 = keras.layers.Dropout(0.45)(dense1)
    dense2 = keras.layers.Dense(64,activation="leaky_relu")(drp1)
    dense3 = keras.layers.Dense(16,activation="leaky_relu")(dense2)
    out = keras.layers.Dense(1,activation="sigmoid")(dense3)
    
    model = tf.keras.Model(inputs=input_ids, outputs=out, name="CNN_Model")
